#!/usr/bin/env php

<?php 
//header("content-type: text/html; charset=utf-8");
include "lib/phpsockets.io.php";
//mb_convert_encoding().//meysam - for converting encodings

	
/**
* The port to run this socket on
*/ 
$server_port="2000";

//initialize socket service
$socket=new PHPWebSockets("0.0.0.0",$server_port);

//file_put_contents("meysam.txt", "meysam - script started - datetime: = ".date("Y-m-d h:i:sa")." \n", FILE_APPEND);


/**
* when a client is connect, send the client its own autogenerated id via emit
* 
*   @param  object  $socket    The socket object of the current client
*   @param  int  $uid		   The user id of the current client
* 
*/
$socket->on("connect",function($socket,$uid) {
		//file_put_contents("meysam.txt", "meysam 3 - in connect \n", FILE_APPEND);
	$socket->emit('connect',$uid);
});

/**
* a callback to handle the command "add user" from a client
* this is used by the advanced example to process a user login
* 
*   @param  object  $socket    The socket object of the current client
*   @param  int  $username	   The username of the current client
*   @param  int  $userid	   The user id of the current client
* 
*/
$socket->on("add user",function($socket,$username,$userid) {
	
	//file_put_contents("meysam.txt", "meysam 0 - in add user - username = ".$username." \n", FILE_APPEND);

	
		//meysam - added
		 //foreach ($socket->socketID as $uid=>$uname) {
			 //if ($uname == $username)
			 //{
				//$socket->removeSpecificUserNameFromSocketList($uid); 
				//$socket->numUsers--;
			 //}
		 //}
	   
	///////////////////////////  
	
	
	$socket->username=$username;
	
	//add the client's username to the global list
	$socket->usernames["$username"] = $username;
	$socket->socketID["$userid"] = $username;
	$socket->numUsers++;
	
	//inform me that my login was successful
	$socket->emit('login', array(
	'numUsers'=>$socket->numUsers
	));

	//broadcast to others that i have joined
	$socket->broadcast('user joined', array(
	'username'=>$socket->username,
	'numUsers'=>$socket->numUsers
	));

	//broadcast the current user list e.g. tony,ayo - this is used in the chat im example
	$socket->broadcast('user list', array(
	    'users'=>json_encode(array_unique(array_values($socket->usernames)))
	),true);
	
	
	$socket->addedUser=true;

});


/**
* a callback to broadcast typing message to other connected users (other than the current client who is typing)
* this is used by the advanced example to handle a message being typed
* 
*   @param  object  $socket    The socket object of the current client
*   @param  string  $data	   Data sent along with callback
* 
*/
$socket->on('typing', function ($socket,$data) {
	
	//file_put_contents("meysam.txt", "meysam 2 - in typing \n", FILE_APPEND);

	$socket->broadcast('typing', array(
	'username'=>$socket->socketID[$socket->user->id],
	));
	
});


/**
* a callback to send message to a specific user
* this is used by the chat im example to handle a message being typed
* 
*   @param  object  $socket    The socket object of the current client
*   @param  object  $data	   Data object sent containing keys - to and data
* 
*/
$socket->on('im user', function ($socket,$data) {

//file_put_contents("meysam.txt", "meysam 1 - in im user - data: ".json_encode($data)." \n", FILE_APPEND);
//file_put_contents("meysam.txt", "meysam 1 - in im user - socket: ".var_dump($socket)." \n", FILE_APPEND);
$sender=@$socket->socketID[$socket->user->id];
//file_put_contents("meysam.txt", "meysam 1 - in im user - sender: ".json_encode($sender)." \n", FILE_APPEND);
//if($data->sender != null)//meysam added
	//$sender=$data->sender;//meysam added
if($sender!=null) {
	//file_put_contents("meysam.txt", "meysam 1 - in im user - sender exist: ".json_encode($sender)." \n", FILE_APPEND);

	//چک شود اگر کاربر هدف وجود نداشت یک کاربر لفت داد به کاربری سندر ارسال شود
	
	//////////////////////////////////////////
	//file_put_contents("meysam.txt", "in server.php  - in im user - sender: ".json_encode($sender)." \n", FILE_APPEND);
	//file_put_contents("meysam.txt", "in server.php  - in im user - reciever: ".json_encode($data->to)." \n", FILE_APPEND);

	//$targetUser = $socket->usernames["$data->to"];
	//file_put_contents("meysam.txt", "in server.php  - in im user - targetUser: ".json_encode($targetUser)." \n", FILE_APPEND);

	if(!array_key_exists($data->to,$socket->usernames))
	{
		//file_put_contents("meysam.txt", "in server.php  - targetUser is null  \n", FILE_APPEND);

		$re=$socket->getUserByName($sender);
		$socket->push($re,'user left', array(
		
		'username'=> $data->to,
		////////////////////////////
			
		'numUsers'=> $socket->numUsers
		));
		
	}
	else
	{
		//file_put_contents("meysam.txt", "in server.php  - targetUser is exist  \n", FILE_APPEND);
		$to=$data->to;
		$data=$data->data;
		//file_put_contents("meysam.txt", "sender: ".json_encode($sender)." \n", FILE_APPEND);
		//file_put_contents("meysam.txt", "to: ".json_encode($to)." \n", FILE_APPEND);
		$re=$socket->getUserByName($to);
		//file_put_contents("meysam.txt", "user: ".var_dump($re), FILE_APPEND);
		$socket->push($re,'im user', array(
		 'sender'=>$sender,
		 'data'=>$data,
		));
	}
}
	
});

/**
* a callback to broadcast when client is no longer typing 
* this is used by the advanced example to handle a message being typed
* 
*   @param  object  $socket    The socket object of the current client
*   @param  string  $data	   Data sent along with callback
* 
*/
$socket->on('stop typing', function ($socket,$data) {
	//file_put_contents("meysam.txt", "meysam 4 - in stop typing \n", FILE_APPEND);
	$socket->broadcast('stop typing', array(
	'username'=>$socket->socketID[$socket->user->id],
	));
	
});

/**
* a callback to broadcast when client broadcasts a chat message
* this is used by the basic example to handle a chat message being sent
* 
*   @param  object  $socket    The socket object of the current client
*   @param  string  $data	   Data sent along with callback
*   @param  string  $sender	   The client sending the message
* 
*/
$socket->on('chat message', function ($socket,$data,$sender) {
	$socket->broadcast('chat message', $data,true); 
});


/**
* a callback to broadcast when client broadcasts a "new message"
* this is used by the advanced example to handle a chat message being sent
* 
*   @param  object  $socket    The socket object of the current client
*   @param  string  $data	   Data sent along with callback
*   @param  string  $sender	   The client sending the message
* 
*/
$socket->on('new message', function ($socket,$data,$sender) {
		//file_put_contents("meysam.txt", "meysam 5 - in new message \n", FILE_APPEND);

	
	// we tell the client to execute 'new message'
	$socket->broadcast('new message', array(
	'username'=>$socket->socketID[$socket->user->id],
	'message'=>$data
	));
	
});

/**
* a callback to handle disconnection of a client from its socket
* 
*   @param  object  $socket    The socket object of the current client
*   @param  string  $data	   Data sent along with callback
* 
*/
$socket->on("disconnect",function($socket,$data) {
	//file_put_contents("meysam.txt", "in server - in disconnect \n", FILE_APPEND);

	//file_put_contents("meysam.txt", "in server.php - in disconnect - socket->username value: ".json_encode($socket->username)." \n", FILE_APPEND);
	//file_put_contents("meysam.txt", "in server.php - in disconnect - socket->user->id value: ".json_encode($socket->user->id)." \n", FILE_APPEND);
	//file_put_contents("meysam.txt", "in server.php - in disconnect - data value: ".json_encode($data)." \n", FILE_APPEND);
	$disconnectedUser = $socket->getUserByid($data);
	$disconnectedUser->name = $socket->socketID["$disconnectedUser->id"];
	//file_put_contents("meysam.txt", "in server.php - in disconnect - disconnectedUser->id value: ".json_encode($disconnectedUser->id)." \n", FILE_APPEND);
	//file_put_contents("meysam.txt", "in server.php - in disconnect - disconnectedUser->name value: ".json_encode($disconnectedUser->name)." \n", FILE_APPEND);
	//file_put_contents("meysam.txt", "in server.php - in disconnect - disconnectedUser value: ".json_encode(var_dump($disconnectedUser))." \n", FILE_APPEND);

	
	// remove the username from global usernames list
	if ($socket->addedUser) {
		//unset($socket->usernames[$socket->username]);
		//unset($socket->socketID[$socket->user->id]);
		
		//meysam - added
		unset($socket->usernames[$disconnectedUser->name]);
		unset($socket->socketID[$disconnectedUser->id]);
		/////////////////////////////
		
		$socket->numUsers--;
			

		
		/////////////////////////meysam - added - start ///////////////////////////////////////////
		//unset($socket->users[$socket->user->id]);
		//file_put_contents("meysam.txt", "in server.php - in disconnect - numUsers value: ".json_encode($socket->numUsers)." \n", FILE_APPEND);
		//file_put_contents("meysam.txt", "in server.php - in disconnect - keys after socketID array: ".json_encode(array_keys($socket->socketID))." \n", FILE_APPEND);
		//file_put_contents("meysam.txt", "in server.php - in disconnect - keys after in userNames array: ".json_encode(array_keys($socket->usernames))." \n", FILE_APPEND);

		/////////////////////////meysam - added - end ///////////////////////////////////////////

		
		

		// echo globally that this client has left
		$socket->broadcast('user left', array(
		
		//commented by meysam
		//'username'=> $socket->username,
		
		//added by meysam
		'username'=> $disconnectedUser->name,
		////////////////////////////
			
		'numUsers'=> $socket->numUsers
		));
		

	  //broadcast the current user list e.g. tony,ayo - this is used in the chat im example
	   $socket->broadcast('user list', array(
	    'users'=>json_encode(array_unique(array_values($socket->usernames)))
	   ),true);
	
	}

});

//instantiate and start handling transactions
$socket->listen();
?>
